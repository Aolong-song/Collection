package com.example.collect.controller;import com.example.collect.domain.CollectItemPo;import com.example.collect.domain.CollectItem;import com.example.collect.domain.GoodsPo;import com.example.collect.feign.GoodsInfoServiceApi;import com.example.collect.service.CollectionService;import com.example.collect.util.ResponseUtil;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.util.*;/** * @author 对象模型标准组 * @time 2019/12/9 */@RestControllerpublic class CollectController {    @Autowired    private CollectionService collectionService;    @Autowired    private GoodsInfoServiceApi goodsInfoServiceApi;    private CollectItem collectItem;    private CollectItemPo collectItemPo;    private List<CollectItem> collectItems;    /**     * 用户收藏列表     *     * param request 用户的token     * @param page   分页页数     * @param limit   分页大小     * @return 用户收藏列表Vo     */    @GetMapping(value = "/collections",produces = "application/json; charset=utf-8")    public Object list(HttpServletRequest request,                       @RequestParam(defaultValue = "1") Integer page,                       @RequestParam(defaultValue = "10") Integer limit) {        String r =request.getHeader("userId");        Object retObj;        if(page<0||limit<0||r==null){            retObj = ResponseUtil.paramNotAllowed();        }else {            Integer userId;            userId = Integer.valueOf(r);            PageHelper.startPage(page,limit);            List<CollectItem> collectItemList = collectionService.list(userId);            PageInfo<CollectItem> collectItemPageInfo = new PageInfo<>(collectItemList);            List<CollectItem> pagelist =collectItemPageInfo.getList();            if(pagelist.size()==0){                retObj = ResponseUtil.ok();            }else {                collectItems = new ArrayList<>();                GoodsPo goodsPo = new GoodsPo();                for (int i = 0; i < pagelist.size(); i++) {                    collectItem = pagelist.get(i);                    Integer id = collectItem.getGoodsId();                    goodsPo = goodsInfoServiceApi.getGoodsByIdIn(id);                    collectItem.setGoodsPo(goodsPo);                    collectItems.add(collectItem);                }                retObj = ResponseUtil.ok(collectItems);            }        }        return retObj;    }    /**     * 用户收藏添加     * <p>     * 用户添加收藏     *     * @param  collectItemPo1  body  请求内容，{ type: xxx, valueId: xxx }     * @return collectItemPo     */    @PostMapping(value = "/collections",produces = "application/json; charset=utf-8")    public Object add( @RequestBody CollectItemPo collectItemPo1) {        Object retObj;        if(collectItemPo1.getUserId()==null||collectItemPo1.getGoodsId()==null){            retObj = ResponseUtil.collectionInsertFail();        }else if(collectionService.beExist(collectItemPo1)){            collectItemPo = collectionService.add(collectItemPo1);            if(collectItemPo.getId()==-1){                retObj = ResponseUtil.collectionInsertFail();            }else {                collectItemPo = collectionService.select(collectItemPo.getId());                retObj = ResponseUtil.ok(collectItemPo);            }        }else{            retObj = ResponseUtil.collectionInsertFail();        }        return retObj;    }    /**     * 用户删除收藏     *     * @param id     * @return status     */    @DeleteMapping("/collections/{id}")    public Object delete( @PathVariable(value = "id") Integer id) {        Object retObj;        collectItemPo = collectionService.select(id);        if(collectItemPo!=null){            if(collectionService.delete(id)==1){                retObj = ResponseUtil.ok();            }else {                retObj = ResponseUtil.collectionDeleteFail();            }        }else{            retObj = ResponseUtil.collectionUnknown();        }        return retObj;    }}